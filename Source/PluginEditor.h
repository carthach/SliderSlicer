/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"


//==============================================================================
/**
*/
class SlicerAudioProcessorEditor  : public AudioProcessorEditor,
                                    public Timer,
                                    public SliderListener,
                                    public ButtonListener
{
public:
    SlicerAudioProcessorEditor (SlicerAudioProcessor&);
    ~SlicerAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;
    void timerCallback() override;
    void displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos);
    AudioPlayHead::CurrentPositionInfo lastDisplayedPosition;
    Label infoLabel;
    Label versionLabel;
    
    String ppqToBarsBeatsString (double ppq, double /*lastBarPPQ*/, int numerator, int     );

    void sliderValueChanged (Slider*) override;
    void buttonClicked(Button * button);
    void randomiseValues();
    void setRanges(bool binary);

    Label inLabel;
    Slider inSliceSubDivSlider;
    Label inSliceSubDivLabel;
    int inSliceSubDiv;

    Label outLabel;
    Slider outSliceSubDivSlider;
    Label outSliceSubDivLabel;
    int outSliceSubDiv;
    
    OwnedArray<Slider> inSliceSliders, outSliceSliders, inSliceOverlaySliders, outSliceOverlaySliders;
    OwnedArray<Slider> setupSliders(int subDiv, int x, int y, bool overlay);
    
    void updateStepSequence(double ppq);
    void setGlitchPoints();
    void clearSliders();
    
    ToggleButton binaryToggleButton;
    TextButton randomButton,clearButton;

private:
    // This reference is provided as a quick way for your editor to
    // access the processor object that created it.
    SlicerAudioProcessor& processor;
    
    Random rand;
    

    struct CustomLookAndFeel : public LookAndFeel_V3 {
        
    };
    
    CustomLookAndFeel myLookAndFeel;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SlicerAudioProcessorEditor)
};


#endif  // PLUGINEDITOR_H_INCLUDED
